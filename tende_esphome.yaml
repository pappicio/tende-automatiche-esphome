esphome:
  name: tende_camera
  friendly_name: tende camera
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: '1.0'

################################################################

  on_boot:
    priority: 700   # best choice between -10 and 800
    then:
      - number.set:
          id: Velocita
          #setta la velocità (number) tende memorizzata nella global "setvel"
          value: !lambda return id(setvel);

################################################################

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

################################################################
preferences:
  flash_write_interval: 1sec
################################################################

 
# Enable logging
logger:
  level: DEBUG
  logs:
    text_sensor: error
    number: ERROR
# Enable Home Assistant API
api:

##############################################################
# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password
##############################################################
# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  networks:
    - ssid: peppe2
    - password: !secret wifi_password2
    - ssid: peppe6
    - password: !secret wifi_password6
   
  manual_ip:
    static_ip: 192.168.1.98
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  ap:
    {}

captive_portal:
 

# To have a "next url" for improv serial
#########################################################################
web_server:
  version: 3
#########################################################################
  
text_sensor:
  - platform: wifi_info
    ssid:
      name: "wifi connesso a:"
      web_server:
        sorting_weight: 7
 
  - platform: template
    name: "Uptime:"
    lambda: |-
      int seconds = (id(uptimex).state);
      String days = String(seconds / (24 * 3600));
      //if (days.length() == 1)
      //{
      //days="0" + days;
      //}
      seconds = seconds % (24 * 3600); 
      String hours = String(seconds / 3600);
      if (hours.length() == 1)
      {
      hours="0" + hours;
      }
      seconds = seconds % 3600;
      String minutes = String(seconds /  60);
      if (minutes.length() == 1)
      {
      minutes="0" + minutes;
      }
      String second = String(seconds % 60);
      if (second.length() == 1)
      {
      second="0" + second;
      }
      return { (days +"g; " + hours +"h " + minutes +"m e "+ second +"s").c_str() };
      //return { (String(days) +"g " + String(hours) +"h:" + String(minutes) +"m:"+ String(seconds) +"s").c_str() };
 
    icon: mdi:clock-start
    update_interval: 5s
#########################################################################

#########################################################################
sensor:
  - platform: wifi_signal
    name: "Segnale WiFi"
    web_server:
      sorting_weight: 8
    update_interval: 10s

  - platform: uptime
    name: "Uptime"
    internal: true
    id: uptimex
    update_interval: 5s
#########################################################################



globals:
  - id: setvel
    type: int
    restore_value: yes
    initial_value: '1000' 


##### 3 pin motore: 1: STEP (motore_pin);DIR (inverti_pin); ENABLE (enable_pin)
##PIN Stepper in pwm per dare input movimenti stepper
output:
  - platform: ledc
    pin: GPIO1
    frequency: 100 Hz
    id: motore_pin

###################################################
switch:

  ##PIN Stepper per abilita/disabilita movimenti
  - platform: gpio
    internal: True
    pin: GPIO0
    inverted: True
    name: enable pin
    id: enable_pin
    restore_mode: RESTORE_DEFAULT_OFF 

  #template switch per output GPIO1, enable pin
  - platform: template
    #pin: GPIO1
    inverted: no
    internal: True
    name: muovi
    id: muovi
    optimistic: True

    on_turn_on: 
      then:
        - output.turn_on: motore_pin
        - output.set_level:
            id: motore_pin
            level: "50%"
    on_turn_off: 
      then:
        - output.turn_off: motore_pin


#PIN Stepper per senso orario/antiorario
  - platform: gpio
    internal: True
    name: inverti_pin
    pin: GPIO2
    inverted: no
    id: inverti_pin
    restore_mode: RESTORE_DEFAULT_OFF

###########SWITCH PER ALEXA!!!!###################
  - platform: template
    name: "apri tende camera"
    id: apri_tende_camera
    optimistic: true
    lambda: return id(apri_tende_camera).state;
    turn_on_action:
      - script.execute: apri
      - delay: 500ms
      - switch.turn_off: apri_tende_camera

  - platform: template
    name: "chiudi tende camera"
    id: chiudi_tende_camera
    optimistic: true
    lambda: return id(chiudi_tende_camera).state;
    turn_on_action:
      - script.execute: chiudi
      - delay: 500ms
      - switch.turn_off: chiudi_tende_camera
###################################################

#endstop fisici
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO6
      mode:
        input: true
        pullup: true
      inverted: true
    name: open_endstop
    id: open_endstop
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - if:
            condition:
               switch.is_on: inverti_pin
            then:
              - script.execute: spegni
       
    on_release: 
      then:
       

  - platform: gpio
    pin:
      number: GPIO5
      mode:
        input: true
        pullup: true
      inverted: true
    name: close_endstop
    id: close_endstop
    on_press:
      then:
        - if:
            condition:
               switch.is_off: inverti_pin
            then:
              - script.execute: spegni
       
    on_release: 
      then:
      

###################################################

#### Tasti apri/chiudi
  - platform: gpio
    internal: True
    pin:
      number: GPIO21
      mode:
        input: true
        pullup: true
      inverted: true
    name: open_button
    id: open_button
    filters:
      - delayed_on: 10ms
    
    on_click:
      min_length: 100ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: |-
                  return id(close_button).state==false && id(enable_pin).state==false;
            then:
              - script.execute: apri
            else:
              - script.execute: spegni
   
  - platform: gpio
    internal: True
    pin:
      number: GPIO20
      mode:
        input: true
        pullup: true
      inverted: true
    name: close_button
    id: close_button

    on_click:
      min_length: 100ms
      max_length: 500ms
      then:
        - if:
            condition:
              - lambda: |-
                  return id(open_button).state==false && id(enable_pin).state==false;
            then:
              - script.execute: chiudi
            else:
              - script.execute: spegni

###################################################

#apri/chiudi, ferma su pagina web
cover:
  - platform: template
    name: "Pilotaggio Tende"
    open_action:  
      - if:
          condition:
            - lambda: |-
                return id(enable_pin).state==false;
          then:
            - script.execute: apri
          else:
            - script.execute: spegni
      
    close_action:
      - if:
          condition:
            - lambda: |-
                return id(enable_pin).state==false;
          then:
            - script.execute: chiudi
          else:
            - script.execute: spegni
     
    stop_action:   
      - script.execute: spegni
    optimistic: true

###################################################

#script per aprire, chiudere e fermare stepper
script:
  - id: spegni
    then:
      - switch.turn_off: enable_pin
      - lambda: |-
          auto call = id(accelerazione).make_call();
          call.set_value(100);
          call.perform();


  - id: apri
    then:
      - if:
          condition:
            - lambda: |-
                return id(open_endstop).state==false;
          then:
            - script.execute: spegni
            - switch.turn_on: inverti_pin
            - output.turn_on: motore_pin
            - switch.turn_on: enable_pin
            - output.set_level:
                id: motore_pin
                level: "50%"

          
  - id: chiudi
    then:
      - if:
          condition:
            - lambda: |-
                return id(close_endstop).state==false;
          then:
            - script.execute: spegni
            - switch.turn_off: inverti_pin
            - output.turn_on: motore_pin
            - switch.turn_on: enable_pin
            - output.set_level:
                id: motore_pin
                level: "50%"

###################################################
  
#slide web per decidere max velocita rotazione stepper
number:
  - platform: template
    name: "Velocità"
    id: Velocita
    optimistic: true
    min_value: 300
    max_value: 3000
    step: 100
    initial_value: 1000

    set_action:
      - globals.set:
          id: setvel
          value: !lambda "return x;"
      - output.turn_on: motore_pin
      #- output.ledc.set_frequency:
      #    id: buzzer
      #    frequency: !lambda "return x;"
      - output.set_level:
          id: motore_pin
          level: "50%"

#inizia da 0 fino a max_velocita per dare effetto accelerazione iniziale
  - platform: template
    internal: True
    name: "accelerazione"
    id: accelerazione
    optimistic: true
    min_value: 10
    max_value: 3000
    step: 0.1
    initial_value: 100
    set_action:
      - output.turn_on: motore_pin
      - output.ledc.set_frequency:
          id: motore_pin
          frequency: !lambda "return x;"
      - output.set_level:
          id: motore_pin
          level: "50%"
 
###################################################

# Intervallo per aggiornare il numero
interval:
  - interval: 20ms  # Frequenza di 2000 Hz (0.5 secondi)
    then:
    - if:
        condition:
          #switch.is_on: enable_pin  # Verifica se il switch è acceso
          - lambda: |-
              return   (id(enable_pin).state) && (id(accelerazione).state) != (id(Velocita).state) ;
        then:
          - lambda: |-
              // Ottieni il valore corrente
              float current_value = id(accelerazione).state;

              // Condizione di incremento o decremento
              //raddoppia per dimezzare tempo e raddoppiare accelerazione ecc....

              float step = 100;  // Passo di incremento/decremento
              if (id(accelerazione).state < 600)
              {
              //step = 1;
              }
              // Se il numero è al massimo, decresce; altrimenti, incrementa
              if (current_value > id(Velocita).state) {
                current_value -= step;  // Decrementa
              } else if (current_value < id(Velocita).state) {
              current_value += step;  // Incrementa
              ////} else {
              // Altrimenti, incrementa
              ////current_value += step;  // Puoi anche decidere se fare incremento o decremento in base a un altro criterio
              }

              // Aggiorna il numero con il nuovo valore
              auto call = id(accelerazione).make_call();
              call.set_value(current_value);
              call.perform();
              
